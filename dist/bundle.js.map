{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;;;AAAwC;AACuD;AACpC;;AAEpD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qDAAU;AAC9B;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM,oDAAI;AACV,WAAW,kDAAO;AAClB;AACA,UAAU;AACV;AACA;AACA,OAAO;AACP,MAAM;AACN,MAAM,oDAAI;AACV,yBAAyB,uDAAe;AACxC,UAAU,gDAAS;AACnB;AACA,wBAAwB,uDAAe;AACvC,UAAU,gDAAS;AACnB;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP,MAAM,oDAAI;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,4BAA4B,uDAAe;AAC3C;AACA,YAAY,sBAAsB,uDAAe;AACjD;AACA,YAAY;AACZ;AACA;AACA,UAAU,yDAAc;AACxB;AACA,UAAU;AACV,UAAU,8DAAmB;AAC7B;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,YAAY,oDAAI;AAChB,+BAA+B,uDAAe;AAC9C,oBAAoB,kDAAO,8BAA8B,kDAAO;AAChE;AACA;AACA;AACA;AACA,8BAA8B,uDAAe;AAC7C,oBAAoB,kDAAO,8BAA8B,kDAAO;AAChE;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,0BAA0B,qDAAa,yBAAyB,uDAAe;AAC/E;AACA,UAAU,uBAAuB,qDAAa,0BAA0B,uDAAe;AACvF;AACA,UAAU,uBAAuB,qDAAa,4BAA4B,uDAAe;AACzF;AACA;AACA,UAAU,uBAAuB,qDAAa,2BAA2B,uDAAe,2BAA2B,uDAAe;AAClI;AACA;AACA,UAAU,uBAAuB,qDAAa,2BAA2B,uDAAe;AACxF;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA,8BAA8B,oDAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC3L4C;AACQ;;AAE7C;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM,2DAAmB;AACzB,8BAA8B,6GAA6G;AAC3I;AACA,MAAM;AACN,MAAM,2DAAmB;AACzB,6FAA6F,mEAAsB;AACnH;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC5GgC;AACJ;AACc;;AAE1C;AACA,kBAAkB,IAAI,uCAAI,sBAAsB;AAChD,QAAQ,uCAAI,0BAA0B,+CAAO;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,EAAE,uCAAI;AACN,wBAAwB,uCAAI;;AAE5B;;AAEA;AACA;AACA,gBAAgB,qDAAa;AAC7B;AACA;AACA;AACA,oBAAoB,IAAI,uCAAI,sBAAsB;AAClD,UAAU,uCAAI,0BAA0B,+CAAO;AAC/C;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI,uCAAI,gBAAgB,uCAAI;AAC5B;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA,IAAI,uCAAI;AACR,IAAI;AACJ,IAAI,uCAAI,gBAAgB,uCAAI;AAC5B;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,IAAI,uCAAI;AACR;AACA;AACA;;;;;;;;;;;;;;;;;ACjEO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;;;;;;;;;;;;;;;;;ACZO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;;;;;;;;;;;;;;;;;;;;;;;ACZiE;AAClB;;AAE/C;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,KAAK,iDAAc;AACnB;AACA,IAAI,QAAQ,iDAAc;AAC1B;AACA,IAAI;AACJ;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACO;AACP;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACO;AACP;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,yEAAyE,gDAAa,GAAG,6CAAU;AACnG,+BAA+B,yCAAyC;AACxE,8BAA8B,+CAA+C;AAC7E;;AAEA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA,iBAAiB,0DAAkB;AACnC,MAAM;AACN,iBAAiB,0DAAkB;AACnC;AACA,IAAI;AACJ;AACA;AACA;;;;;;;UClGA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACN4C;;AAE5C;AACA;AACA;;AAEA,mBAAmB,wDAAO;;AAE1B","sources":["webpack://room-planner/./src/component/drag-obj.js","webpack://room-planner/./src/component/plan.js","webpack://room-planner/./src/component/rotate-obj.js","webpack://room-planner/./src/constants.js","webpack://room-planner/./src/data.js","webpack://room-planner/./src/utils.js","webpack://room-planner/webpack/bootstrap","webpack://room-planner/webpack/runtime/define property getters","webpack://room-planner/webpack/runtime/hasOwnProperty shorthand","webpack://room-planner/webpack/runtime/make namespace object","webpack://room-planner/./src/index.js"],"sourcesContent":["import {Plan} from '@component/plan.js';\nimport {addCellSuccess, addCellSuccessThree, dragCheck, isEqual, setSizeObj} from '@/utils.js';\nimport {COORDINATE_CORD, SIZE_ELEMENTS} from '@/constants';\n\nexport class DragObj {\n  constructor(draggableObjElements, planCell, planGrid) {\n    this.elementsDrag = draggableObjElements;\n    this.planCell = planCell;\n    this.planGrid = planGrid;\n    this.xCord = 0;\n    this.size = 0;\n    this.arrEvtTarget = null;\n    this.arrEvtTargetSecond = null;\n    this.arrEvtTargetFirst = null;\n    this.dragElementNow = null;\n  }\n\n  startDrag() {\n    this.elementsDrag.forEach((item) => {\n      item.addEventListener('dragstart', (evt) => {\n        const rect = evt.target.getBoundingClientRect();\n        this.xCord = evt.clientX - rect.left;\n        this.size = setSizeObj(evt.target);\n        this.dragElementNow = evt.target;\n        evt.dataTransfer.setData('id', evt.target.dataset.id);\n      });\n    });\n  }\n\n  #utilsDragObj(evt) {\n    this.arrEvtTarget = [Number(evt.target.dataset.x), Number(evt.target.dataset.y)];\n    if (evt.target.nextElementSibling !== null) {\n      this.arrEvtTargetSecond = [Number(evt.target?.nextElementSibling?.dataset.x), Number(evt.target?.nextElementSibling?.dataset.y)];\n      this.arrEvtTargetFirst = [Number(evt.target?.previousElementSibling?.dataset.x), Number(evt.target?.previousElementSibling?.dataset.y)];\n    }\n  }\n\n  #checkBusyCells(evt, size = 1) {\n    if(size === 1) {\n      Plan.busyCells.forEach((it)=>{\n        if(isEqual(this.arrEvtTarget , it)){\n          evt.target.classList.add('plan__cell_error');\n        } else {\n          evt.target.classList.add('plan__cell_success');\n        }\n      });\n    } else if(size === 2) {\n      Plan.busyCells.forEach((it)=>{\n        if(this.xCord <= COORDINATE_CORD.AfterTwo){\n          dragCheck.call(this, evt, it, false);\n        }\n        if(this.xCord > COORDINATE_CORD.AfterTwo){\n          dragCheck.call(this, evt, it, true);\n        }\n      });\n    }\n  }\n\n  dragenter() {\n    document.addEventListener('dragover', (evt)=>{\n      let lastCell;\n      if(evt.target.classList.contains('plan__cell')){\n        this.dragElementNow = evt.target;\n      }\n      if(!evt.target.classList.contains('plan__cell') && this.dragElementNow.dataset.x === '1'){\n        if(evt.clientY>120 &&  evt.clientY < (120 + (6 * 66))){\n          this.planCell.forEach((item) => {\n            if(item.dataset.y == Math.floor(evt.clientY - 120) / 66 && item.dataset.x === '1'){\n              item.classList.add('plan__cell_error');\n            }\n          })\n        }\n        // this.dragElementNow = evt.target;\n      }\n    });\n    this.planGrid.addEventListener('dragover', (evt) => {\n      this.planCell.forEach((it) => {\n        it.classList.add('plan__cell_hack');\n      });\n      Plan.createBusyCells();\n      this.#utilsDragObj(evt);\n      if (evt.target.classList.contains('plan__cell')) {\n        if (this.size === 1) {\n          evt.target.classList.add('plan__cell_success');\n          this.#checkBusyCells(evt);\n        } else if (this.size === 2) {\n          if (this.xCord <= COORDINATE_CORD.AfterTwo && evt.target.dataset.x === '10'){\n            evt.target.classList.add('plan__cell_error');\n          } else if (this.xCord > COORDINATE_CORD.AfterTwo && evt.target.dataset.x === '1') {\n            evt.target.classList.add('plan__cell_error');\n          } else {\n            evt.target.nextElementSibling?.classList.remove('plan__cell_error');\n          }\n          addCellSuccess(this.planCell, evt.target, this.xCord);\n          this.#checkBusyCells(evt, 2);\n        } else if (this.size === 3) {\n          addCellSuccessThree(this.planCell, evt.target, this.xCord);\n        }\n      }\n    }, true);\n  }\n\n  dragleave() {\n    this.planCell.forEach((it) => {\n      this.planGrid.addEventListener('dragleave', (evt) => {\n        this.#utilsDragObj(evt);\n        if (this.size === 1) {\n          if(it.classList.contains('plan__cell_error')) {\n            it.classList.remove('plan__cell_error');\n          }\n          it.classList.remove('plan__cell_success');\n        } else {\n          if (this.size === 2) {\n            Plan.busyCells.forEach((item)=> {\n              if(this.xCord <= COORDINATE_CORD.AfterTwo) {\n                if(!isEqual(this.arrEvtTarget, item) || !isEqual(this.arrEvtTargetSecond, item)) {\n                  evt.target.classList.remove('plan__cell_error');\n                  evt.target.nextElementSibling?.classList.remove('plan__cell_error');\n                }\n              }\n              if(this.xCord > COORDINATE_CORD.AfterTwo) {\n                if(!isEqual(this.arrEvtTarget, item) || !isEqual(this.arrEvtTargetFirst, item)) {\n                  evt.target.classList.remove('plan__cell_error');\n                  evt.target.previousElementSibling?.classList.remove('plan__cell_error');\n                }\n              }\n            });\n            if(evt.target.dataset.x === '10' || evt.target.dataset.x === '1'){\n              evt.target.classList.remove('plan__cell_error');\n            }\n          }\n          this.planCell.forEach((item) => {\n            if (Number(item.dataset.y === it.dataset.y)) {\n              item.classList.remove('plan__cell_success');\n            }\n          });\n        }\n      });\n    });\n  }\n\n  drop(planContainer) {\n    this.planGrid.addEventListener('dragover', (evt) => {\n      evt.preventDefault();\n    });\n    this.planGrid.addEventListener('drop', (evt) => {\n      const elementDrop = Array.from(this.elementsDrag).filter((item) => item.children[0].dataset.id === evt.dataTransfer.getData('id'));\n      evt.stopPropagation();\n      if (evt.target.classList.contains('plan__cell_success') && !evt.target.classList.contains('plan__cell_error')) {\n        if (this.size === SIZE_ELEMENTS.SizeTwo && this.xCord > COORDINATE_CORD.AfterTwo) {\n          evt.target.previousElementSibling.classList.remove('plan__cell_success');\n        } else if (this.size === SIZE_ELEMENTS.SizeTwo && this.xCord <= COORDINATE_CORD.AfterTwo) {\n          evt.target.nextElementSibling.classList.remove('plan__cell_success');\n        } else if (this.size === SIZE_ELEMENTS.SizeThree && this.xCord <= COORDINATE_CORD.AfterTwo) {\n          evt.target.nextElementSibling.classList.remove('plan__cell_success');\n          evt.target.nextElementSibling.nextElementSibling.classList.remove('plan__cell_success');\n        } else if (this.size === SIZE_ELEMENTS.SizeThree && this.xCord > COORDINATE_CORD.AfterTwo && this.xCord <= COORDINATE_CORD.AfterThree) {\n          evt.target.nextElementSibling.classList.remove('plan__cell_success');\n          evt.target.previousElementSibling.classList.remove('plan__cell_success');\n        } else if (this.size === SIZE_ELEMENTS.SizeThree && this.xCord > COORDINATE_CORD.AfterThree) {\n          evt.target.previousElementSibling.classList.remove('plan__cell_success');\n          evt.target.previousElementSibling.previousElementSibling.classList.remove('plan__cell_success');\n        }\n        planContainer.createElements(elementDrop[0], evt.target, this.xCord, this.size);\n        evt.target.classList.remove('plan__cell_success');\n      } else {\n        evt.target.classList.remove('plan__cell_success');\n        evt.target.classList.remove('plan__cell_error');\n        evt.target.nextElementSibling?.classList.remove('plan__cell_error');\n        evt.target.previousElementSibling?.classList.remove('plan__cell_error');\n      }\n      this.planCell.forEach((it)=>{\n        it.classList.remove('plan__cell_hack');\n        it.classList.remove('plan__cell_success');\n        it.classList.remove('plan__cell_error');\n      });\n    });\n  }\n\n  init() {\n    const planContainer = new Plan(this.planGrid, this.planCell);\n    planContainer.init();\n    this.startDrag();\n    this.dragleave();\n    this.dragenter();\n    this.drop(planContainer);\n  }\n}\n","import {createElementOnPlan} from '@/utils';\nimport {checkPossibilityRotate} from './rotate-obj';\n\nexport class Plan {\n  static busyCells = [];\n  static planCellBusy = [];\n  constructor(planGrid, planCell) {\n    this.planGrid = planGrid;\n    this.planCell = planCell;\n    this.btnReset = document.querySelector('.scheduler__action-reset');\n    this.size = 66;\n  }\n\n  createElements(element, dropElement, xCord, size) {\n    const elementClone = element.cloneNode(true);\n    elementClone.removeChild(elementClone.querySelector('.object__name'));\n    elementClone.children[0].removeAttribute('draggable');\n    if (size === 1) {\n      createElementOnPlan(elementClone, dropElement, xCord, this.size, size);\n      Plan.planCellBusy.push({'id':Number(elementClone.dataset.id), 'cell': [Number(dropElement.dataset.x), Number(dropElement.dataset.y)]});\n      Plan.createBusyCells();\n    } else {\n      createElementOnPlan(elementClone, dropElement, xCord, this.size, size, this.planCell);\n      elementClone.querySelector('.figure__button-rotate').addEventListener('click',(evt) => checkPossibilityRotate(evt, dropElement, size, elementClone));\n      if(size === 2){\n        Plan.planCellBusy.push({\n          'id':Number(elementClone.dataset.id),\n          'cell': [\n            [Number(dropElement.dataset.x), Number(dropElement.dataset.y)],\n            [Number(dropElement.dataset.x) + (xCord <= 66 ? 1 : -1), Number(dropElement.dataset.y)]\n          ]});\n        Plan.createBusyCells();\n      }\n      if(size === 3){\n        Plan.planCellBusy.push({\n          'id':Number(elementClone.dataset.id),\n          'cell': [\n            [Number(dropElement.dataset.x), Number(dropElement.dataset.y)],\n            [Number(dropElement.dataset.x) + (xCord <= 132 ? 1 : -1), Number(dropElement.dataset.y)],\n            // eslint-disable-next-line no-nested-ternary\n            [Number(dropElement.dataset.x) + (xCord <= 66 ? 2 : xCord <= 132 ? -1 : -2), Number(dropElement.dataset.y)]\n          ]});\n        Plan.createBusyCells();\n      }\n    }\n    this.planGrid.append(elementClone);\n    this.updatePlan();\n  }\n\n  resetRoom() {\n    const objElementsPlan = this.planGrid.querySelectorAll('.objects__item');\n    this.planCell.forEach((item) => {\n      if (item.classList.contains('plan__cell_success')) {\n        item.classList.remove('plan__cell_success');\n      }\n      if (item.classList.contains('plan__cell_error')) {\n        item.classList.remove('plan__cell_error');\n      }\n    });\n    objElementsPlan.forEach((item) => {\n      item.remove();\n      Plan.planCellBusy = [];\n      Plan.busyCells = [];\n    });\n  }\n\n  static createBusyCells() {\n    Plan.busyCells = [];\n    Plan.planCellBusy.forEach((item) => {\n      if(Array.isArray(item.cell[0])) {\n        for(let i = 0; i < item.cell.length; i++) {\n          Plan.busyCells.push(item.cell[i]);\n        }\n      } else {\n        Plan.busyCells.push(item.cell);\n      }\n    });\n  }\n\n  updatePlan() {\n    const btnDeleteElement = document.querySelectorAll('.figure__button-delete');\n    btnDeleteElement.forEach((item) => {\n      item.addEventListener('click', (evt) => {\n        const deleteElement = evt.currentTarget.parentNode.parentNode.parentNode;\n        // eslint-disable-next-line\n        Plan.planCellBusy = Plan.planCellBusy.filter((elements)=> elements.id != deleteElement.dataset.id);\n        deleteElement.remove();\n      });\n    });\n\n  }\n\n  init() {\n    this.resetRoom();\n    const btnRotateElement = document.querySelectorAll('.figure__button-rotate');\n    btnRotateElement.forEach((item) => {\n      item.addEventListener('click', (evt) => {\n        const elementTarget = evt.currentTarget.parentNode.parentNode.parentNode;\n        if (!elementTarget.classList.contains('objects__item-rotated')) {\n          elementTarget.classList.add('objects__item-rotated');\n        } else {\n          elementTarget.classList.remove('objects__item-rotated');\n        }\n      });\n    });\n    this.updatePlan();\n    this.btnReset.addEventListener('click', () => this.resetRoom());\n  }\n}\n","import {isEqual} from '@/utils';\nimport {Plan} from './plan';\nimport {SIZE_ELEMENTS} from '@/constants';\n\nfunction checkBusyCellsRotate(arrayP, element) {\n  for (let i = 0; i < Plan.planCellBusy.length; i++) {\n    if (Plan.busyCells.some((item) => isEqual(item, arrayP))) {\n      element.classList.add('shake-on-hover');\n      setTimeout(() => element.classList.remove('shake-on-hover'), 400);\n      return;\n    }\n  }\n}\n\nexport function checkPossibilityRotate(evt, cell, size, element) {\n  Plan.createBusyCells();\n  const rotateElement = Plan.planCellBusy.filter((cells)=> cells.id === Number(element.dataset.id)).shift();\n\n  rotateElement.cell.sort((a,b) => a[0] - b[0]);\n\n  if(!element.classList.contains('objects__item-rotated')) {\n    const arrP = [(parseInt(element.style.left, 10) / 66) + 1, (parseInt(element.style.top, 10) / 66) + size];\n    if(size === SIZE_ELEMENTS.SizeThree) {\n      const arrSecondP = [(parseInt(element.style.left, 10) / 66) + 1, (parseInt(element.style.top, 10) / 66) + size - 1];\n      checkBusyCellsRotate(arrSecondP, element);\n    }\n    for (let i = 0; i < Plan.planCellBusy.length; i++) {\n      if (Plan.busyCells.some((item) => isEqual(item, arrP))) {\n        element.classList.add('shake-on-hover');\n        setTimeout(() => element.classList.remove('shake-on-hover'), 400);\n        return;\n      }\n    }\n  } else if(element.classList.contains('objects__item-rotated')) {\n    const arrP = [(parseInt(element.style.left, 10) / 66) + size, (parseInt(element.style.top, 10) / 66) + 1 ];\n    checkBusyCellsRotate(arrP, element);\n  }\n  if (Number(cell.dataset.y) + Number(size) > 7){\n    element.classList.add('shake-on-hover');\n    setTimeout(() => element.classList.remove('shake-on-hover'), 400);\n    return;\n  }\n\n  if (!element.classList.contains('objects__item-rotated')) {\n    element.classList.add('objects__item-rotated');\n    Plan.planCellBusy = Plan.planCellBusy.filter((item)=> item.id !== element.dataset.id);\n    if(size === 2) {\n      rotateElement.cell[1] = [rotateElement.cell[1][0] - 1, rotateElement.cell[1][1] + 1];\n    } else {\n      rotateElement.cell[1] = [rotateElement.cell[1][0] - 1, rotateElement.cell[1][1] + 1];\n      rotateElement.cell[2] = [rotateElement.cell[2][0] - 2, rotateElement.cell[2][1] + 2];\n\n    }\n    Plan.planCellBusy.push(rotateElement);\n  } else {\n    Plan.planCellBusy = Plan.planCellBusy.filter((item)=> item.id !== element.dataset.id);\n    if(size === 2) {\n      rotateElement.cell[1] = [rotateElement.cell[1][0] + 1, rotateElement.cell[1][1] - 1];\n    } else {\n      rotateElement.cell[1] = [rotateElement.cell[1][0] + 1, rotateElement.cell[1][1] - 1];\n      rotateElement.cell[2] = [rotateElement.cell[2][0] + 2, rotateElement.cell[2][1] - 2];\n    }\n    Plan.planCellBusy.push(rotateElement);\n    element.classList.remove('objects__item-rotated');\n  }\n}\n","export const SIZE_ELEMENTS = {\n  SizeOne: 1,\n  SizeTwo: 2,\n  SizeThree: 3\n};\nexport const COORDINATE_CORD = {\n  AfterTwo: 66,\n  AfterThree: 132,\n};\nexport const NEXT_PREV_ELEMENTS = {\n  Prev: 'previousElementSibling',\n  Next: 'nextElementSibling',\n};\n","export const elementsInDrag = {\n  sizeOne: ['656182e8', '1a3a7c28', 'd8b58e3', '52399318', 'cf902348', 'f25b4eb8', 'c1e9b028', '7f08c23', 'fa64ef9', 'b0d82498'],\n  sizeThree: ['0efbcbd']\n};\nexport const buttonSize = `<svg class=\"figure__button figure__button-rotate\" fill=\"currentColor\" height=\"1em\" width=\"1em\">\n                                    <use xlink:href=\"#rotate-icon\"></use>\n                                  </svg>\n                                 <svg class=\"figure__button figure__button-delete\" fill=\"currentColor\" height=\"1em\" width=\"1em\">\n                                  <use xlink:href=\"#delete-icon\"></use>\n                                 </svg>`;\nexport const buttonOneSize = `<svg class=\"figure__button figure__button-delete\" fill=\"currentColor\" height=\"1em\" width=\"1em\">\n                                       <use xlink:href=\"#delete-icon\"></use>\n                                     </svg>`;\n","import {buttonOneSize, buttonSize, elementsInDrag} from './data';\nimport {NEXT_PREV_ELEMENTS} from '@/constants';\n\nconst getRandomInteger = (a, b) => {\n  const lower = Math.ceil(Math.min(a, b));\n  const upper = Math.floor(Math.max(a, b));\n  const result = Math.random() * (upper - lower + 1) + lower;\n  return Math.floor(result);\n};\n\nexport const generateRandomIndex = (a, b) => {\n  const indexNumbers = [];\n  return () => {\n    let currentIndex = getRandomInteger(a, b);\n    if (indexNumbers.length === Math.floor(Math.max(a, b))) {\n      return '';\n    }\n    while (indexNumbers.includes(currentIndex)) {\n      currentIndex = getRandomInteger(a, b);\n    }\n    indexNumbers.push(currentIndex);\n    return currentIndex;\n  };\n};\nexport const setSizeObj = (elem) => {\n  let size;\n  if(elementsInDrag.sizeOne.includes(elem.dataset.id)) {\n    size = 1;\n  } else if(elementsInDrag.sizeThree.includes(elem.dataset.id)) {\n    size = 3;\n  } else {\n    size = 2;\n  }\n  return size;\n};\nexport const addCellSuccess = (planCells, elem, xCord) => {\n  planCells.forEach((item) => {\n    if (Number(item.dataset.x) === elem.dataset.x - (xCord <= 66 ? -1 : 1) && Number(item.dataset.y === elem.dataset.y)) {\n      item.classList.add('plan__cell_success');\n      elem.classList.add('plan__cell_success');\n    }\n  });\n};\nexport const addCellSuccessThree = (planCells, elem, xCord) => {\n  let shiftX, shiftXSecond;\n  if(xCord <= 66) {\n    shiftX = 1;\n    shiftXSecond = 2;\n  } else if(xCord > 132) {\n    shiftX = -2;\n    shiftXSecond = -1;\n  } else {\n    shiftX = -1;\n    shiftXSecond = 1;\n  }\n  planCells.forEach((item) => {\n    if (Number(item.dataset.x) === Number(elem.dataset.x) + shiftX && Number(item.dataset.y === elem.dataset.y)) {\n      item.classList.add('plan__cell_success');\n      elem.classList.add('plan__cell_success');\n    }\n    if (Number(item.dataset.x) === Number(elem.dataset.x) + shiftXSecond && Number(item.dataset.y === elem.dataset.y)) {\n      item.classList.add('plan__cell_success');\n    }\n  });\n};\nexport const createElementOnPlan = (elementClone, dropElement, xCord, size, sizeElement) =>{\n  let shiftX, shiftXSecond;\n  if(xCord <= 66) {\n    shiftX = 1;\n    shiftXSecond = 1;\n  } else if(xCord > 132) {\n    shiftX = 3;\n    shiftXSecond = 1;\n  } else {\n    shiftX = 2;\n    shiftXSecond = 1;\n  }\n  elementClone.children[0].children[0].innerHTML = (sizeElement === 1) ? buttonOneSize : buttonSize;\n  elementClone.style.left = `${(dropElement.dataset.x - shiftX) * size }px`;\n  elementClone.style.top = `${(dropElement.dataset.y - shiftXSecond) * size }px`;\n  elementClone.dataset.id = generateRandomIndex(1,100)();\n\n};\nexport function isEqual(array1, array2) {\n  return JSON.stringify(array1) === JSON.stringify(array2);\n}\nexport function dragCheck(evt, it, afterTwo) {\n  const arrTarget = !afterTwo ? this.arrEvtTargetSecond : this.arrEvtTargetFirst;\n  if(isEqual(this.arrEvtTarget, it) || isEqual(arrTarget, it)){\n    evt.target.classList.add('plan__cell_error');\n    if(this.arrEvtTarget[0] !== 10 && !afterTwo){\n      evt.target[NEXT_PREV_ELEMENTS.Next]?.classList?.add('plan__cell_error');\n    } else if(afterTwo){\n      evt.target[NEXT_PREV_ELEMENTS.Prev]?.classList.add('plan__cell_error');\n    }\n  } else {\n    evt.target.classList?.add('plan__cell_success');\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {DragObj} from '@component/drag-obj';\n\nconst draggableObjElements = document.querySelector('.constructor__aside').querySelectorAll('.objects__item');\nconst planGrid = document.querySelector('.plan');\nconst planCell = planGrid.querySelectorAll('.plan__cell');\n\nconst dragEl = new DragObj(draggableObjElements, planCell, planGrid);\n\ndragEl.init();\n"],"names":[],"sourceRoot":""}